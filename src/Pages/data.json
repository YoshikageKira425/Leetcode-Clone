[
  {
    "id": 1,
    "title": "Two Sum",
    "difficulty": "Easy",
    "description": "  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "default_code": {
      "python": "def twoSum(nums, target):\n    # Write your code here\n    pass",
      "csharp": "public static int[] TwoSum(int[] nums, int target)\n{\n    // Write your code here\n    return new int[] {};\n}",
      "java": "public static int[] twoSum(int[] nums, int target) \n{\n    // Write your code here\n    return new int[] {};\n}"
    },
    "code_run": {
      "python" : "print(\"Test Case 1\", twoSum([2, 7, 11, 15], 9))\nprint(\"Test Case 2\", twoSum([3, 2, 4], 6))",
      "csharp": "Console.WriteLine(\"Test Case 1[\" + string.Join(\", \", TwoSum(new int[]{2, 7, 11, 15}, 9)) + \"]\"); \n Console.WriteLine(\"Test Case 2 [\" + string.Join(\", \", TwoSum(new int[]{3, 2, 4}, 6)) + \"]\");",
      "java" : "System.out.println(\"Test Case 1\" + Arrays.toString(twoSum(new int[]{2, 7, 11, 15}, 9))); \n System.out.println(); \n System.out.println(\"Test Case 2:\" + Arrays.toString(twoSum(new int[]{3, 2, 4}, 6)));"
    },
    "test_cases": [
        {
          "input": {"nums": [2, 7, 11, 15], "target": 9}, 
          "output": [0, 1]
        },
        {
          "input": {"nums": [3, 2, 4], "target": 6}, 
          "output": [1, 2]
        }
    ],
    "corrent_answer": "Test Case 1 [0, 1]\nTest Case 2 [1, 2]\n"
  },
  {
    "id": 2,
    "title": "Reverse Integer",
    "difficulty": "Medium",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range, return 0.",
    "default_code": {
      "python": "def reverse(x):\n    # Write your code here\n    pass",
      "csharp": "public static int Reverse(int x)\n{\n    // Write your code here\n    return 0;\n}",
      "java": "public static int reverse(int x) \n{\n    // Write your code here\n    return 0;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1 \", reverse(123))\nprint(\"Test Case 2 \", reverse(-123))\nprint(\"Test Case 3 \", reverse(120))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + Reverse(123));\nConsole.WriteLine(\"Test Case 2 \" +Reverse(-123));\nConsole.WriteLine(\"Test Case 3 \" + Reverse(120));",
      "java": "System.out.println(\"Test Case 1 \" +reverse(123));\nSystem.out.println(\"Test Case 2 \" +reverse(-123));\nSystem.out.println(\"Test Case 3 \" + reverse(120));"
    },
    "test_cases": [
      {"input": {"x": 123}, "output": 321},
      {"input": {"x": -123}, "output": -321},
      {"input": {"x": 120}, "output": 21}
    ],
    "corrent_answer": "Test Case 1 321\nTest Case 2 -321\nTest Case 3 21\n"
  },
  {
    "id": 3,
    "title": "Reverse Words in a String",
    "difficulty": "Medium",
    "description": "Given an input string s, reverse the order of the words. \n A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space. \n Return a string of the words in reverse order concatenated by a single space. \nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.",
    "default_code": {
      "python": "def reverseWords(s):\n    # Write your code here\n    pass",
      "csharp": "public static string reverseWords(string s)\n{\n    // Write your code here\n    return \"\";\n}",
      "java": "public static string reverseWords(string s) \n{\n    // Write your code here\n    return \"\";\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1 \", reverseWords(\"the sky is blue\"))\nprint(\"Test Case 2 \", reverseWords(\"  hello world  \"))\nprint(\"Test Case 3 \", reverseWords(\"a good   example\"))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + reverseWords(\"the sky is blue\"));\nConsole.WriteLine(\"Test Case 2 \" +reverseWords(\"  hello world  \"));\nConsole.WriteLine(\"Test Case 3 \" + reverseWords(\"a good   example\"));",
      "java": "System.out.println(\"Test Case 1 \" +reverseWords(\"the sky is blue\"));\nSystem.out.println(\"Test Case 2 \" +reverseWords(\"  hello world  \"));\nSystem.out.println(\"Test Case 3 \" + reverseWords(\"a good   example\"));"
    },
    "test_cases": [
      {"input": {"s": "the sky is blue"}, "output": "blue is sky the"},
      {"input": {"s": "  hello world  "}, "output": "world hello"},
      {"input": {"s": "a good   example"}, "output": "example good a"}
    ],
    "corrent_answer": "Test Case 1 blue is sky the\nTest Case 2 world hello\nTest Case 3 example good a\n"
  },
  {
    "id": 4,
    "title": "Palindrome Number",
    "difficulty": "Easy",
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
    "input": {"x": "int"},
    "output": "bool",
    "default_code": {
      "python": "def isPalindrome(x):\n    # Write your code here\n    pass",
      "csharp": "public static bool IsPalindrome(int x)\n{\n    // Write your code here\n    return false;\n}",
      "java": "public static boolean isPalindrome(int x) \n{\n    // Write your code here\n    return false;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", isPalindrome(121))\nprint(\"Test Case 2\", isPalindrome(-121))\nprint(\"Test Case 3\", isPalindrome(10))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + IsPalindrome(121));\nConsole.WriteLine(\"Test Case 2 \" + IsPalindrome(-121));\nConsole.WriteLine(\"Test Case 3 \" + IsPalindrome(10));",
      "java": "System.out.println(\"Test Case 1 \" + isPalindrome(121));\nSystem.out.println(\"Test Case 2 \" + isPalindrome(-121));\nSystem.out.println(\"Test Case 3 \" + isPalindrome(10));"
    },
    "test_cases": [
      {"input": {"x": 121}, "output": true},
      {"input": {"x": -121}, "output": false},
      {"input": {"x": 10}, "output": false}
    ],
    "corrent_answer": "Test Case 1 True\nTest Case 2 False\nTest Case 3 False\n"
  },
  {
    "id": 5,
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if open brackets are closed by the same type of brackets and in the correct order.",
    "input": {"s": "string"},
    "output": "bool",
    "default_code": {
      "python": "def isValid(s):\n    # Write your code here\n    pass",
      "csharp": "public static bool IsValid(string s)\n{\n    // Write your code here\n    return false;\n}",
      "java": "public static boolean isValid(String s) \n{\n    // Write your code here\n    return false;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", isValid(\"()\"))\nprint(\"Test Case 2\", isValid(\"()[]{}\"))\nprint(\"Test Case 3\", isValid(\"(]\") )",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + IsValid(\"()\"));\nConsole.WriteLine(\"Test Case 2 \" + IsValid(\"()[]{}\"));\nConsole.WriteLine(\"Test Case 3 \" + IsValid(\"(]\") );",
      "java": "System.out.println(\"Test Case 1 \" + isValid(\"()\"));\nSystem.out.println(\"Test Case 2 \" + isValid(\"()[]{}\"));\nSystem.out.println(\"Test Case 3 \" + isValid(\"(]\") );"
    },
    "test_cases": [
      {"input": {"s": "()"}, "output": true},
      {"input": {"s": "()[]{}"}, "output": true},
      {"input": {"s": "(]"}, "output": false}
    ],
    "corrent_answer": "Test Case 1 True\nTest Case 2 True\nTest Case 3 False\n"
  },
  {
    "id": 6,
    "title": "Climbing Stairs",
    "difficulty": "Medium",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. Return how many distinct ways you can climb to the top.",
    "input": {"n": "int"},
    "output": "int",
    "default_code": {
      "python": "def climbStairs(n):\n    # Write your code here\n    pass",
      "csharp": "public static int ClimbStairs(int n)\n{\n    // Write your code here\n    return 0;\n}",
      "java": "public static int climbStairs(int n) \n{\n    // Write your code here\n    return 0;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", climbStairs(2))\nprint(\"Test Case 2\", climbStairs(3))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + ClimbStairs(2));\nConsole.WriteLine(\"Test Case 2 \" + ClimbStairs(3));",
      "java": "System.out.println(\"Test Case 1 \" + climbStairs(2));\nSystem.out.println(\"Test Case 2 \" + climbStairs(3));"
    },
    "test_cases": [
      {"input": {"n": 2}, "output": 2},
      {"input": {"n": 3}, "output": 3}
    ],
    "corrent_answer": "Test Case 1 2\nTest Case 2 3\n"
  },
  {
    "id": 7,
    "title": "Find Maximum Subarray",
    "difficulty": "Medium",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "input": {"nums": "List[int]"},
    "output": "int",
    "default_code": {
      "python": "def maxSubArray(nums):\n    # Write your code here\n    pass",
      "csharp": "public static int MaxSubArray(int[] nums)\n{\n    // Write your code here\n    return 0;\n}",
      "java": "public static int maxSubArray(int[] nums) \n{\n    // Write your code here\n    return 0;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", maxSubArray([-2,1,-3,4,-1,2,1,-5,4]))\nprint(\"Test Case 2\", maxSubArray([1]))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + MaxSubArray(new int[]{-2,1,-3,4,-1,2,1,-5,4}));\nConsole.WriteLine(\"Test Case 2 \" + MaxSubArray(new int[]{1}));",
      "java": "System.out.println(\"Test Case 1 \" + maxSubArray(new int[]{-2,1,-3,4,-1,2,1,-5,4}));\nSystem.out.println(\"Test Case 2 \" + maxSubArray(new int[]{1}));"
    },
    "test_cases": [
      {"input": {"nums": [-2,1,-3,4,-1,2,1,-5,4]}, "output": 6},
      {"input": {"nums": [1]}, "output": 1}
    ],
    "corrent_answer": "Test Case 1 6\nTest Case 2 1\n"
  },
  {
    "id": 8,
    "title": "Valid Anagram",
    "difficulty": "Easy",
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.",
    "input": {"s": "string", "t": "string"},
    "output": "bool",
    "default_code": {
      "python": "def isAnagram(s, t):\n    # Write your code here\n    pass",
      "csharp": "public static bool IsAnagram(string s, string t)\n{\n    // Write your code here\n    return false;\n}",
      "java": "public static boolean isAnagram(String s, String t) \n{\n    // Write your code here\n    return false;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", isAnagram(\"anagram\", \"nagaram\"))\nprint(\"Test Case 2\", isAnagram(\"rat\", \"car\"))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + IsAnagram(\"anagram\", \"nagaram\"));\nConsole.WriteLine(\"Test Case 2 \" + IsAnagram(\"rat\", \"car\"));",
      "java": "System.out.println(\"Test Case 1 \" + isAnagram(\"anagram\", \"nagaram\"));\nSystem.out.println(\"Test Case 2 \" + isAnagram(\"rat\", \"car\"));"
    },
    "test_cases": [
      {"input": {"s": "anagram", "t": "nagaram"}, "output": true},
      {"input": {"s": "rat", "t": "car"}, "output": false}
    ],
    "corrent_answer": "Test Case 1 True\nTest Case 2 False\n"
  },
  {
    "id": 9,
    "title": "Count Primes",
    "difficulty": "Medium",
    "description": "Count the number of prime numbers less than a non-negative number, n.",
    "input": {"n": "int"},
    "output": "int",
    "default_code": {
      "python": "def countPrimes(n):\n    # Write your code here\n    pass",
      "csharp": "public static int CountPrimes(int n)\n{\n    // Write your code here\n    return 0;\n}",
      "java": "public static int countPrimes(int n) \n{\n    // Write your code here\n    return 0;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", countPrimes(10))\nprint(\"Test Case 2\", countPrimes(0))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + CountPrimes(10));\nConsole.WriteLine(\"Test Case 2 \" + CountPrimes(0));",
      "java": "System.out.println(\"Test Case 1 \" + countPrimes(10));\nSystem.out.println(\"Test Case 2 \" + countPrimes(0));"
    },
    "test_cases": [
      {"input": {"n": 10}, "output": 4},
      {"input": {"n": 0}, "output": 0}
    ],
    "corrent_answer": "Test Case 1 4\nTest Case 2 0\n"
  },
  {
    "id": 10,
    "title": "Move Zeroes",
    "description": "Given an integer array nums, move all 0's to the end while maintaining the relative order of the non-zero elements.",
    "difficulty": "Easy",
    "default_code": {
      "python": "def MoveZeroes(nums):\n    # Write your code here\n    pass",
      "csharp": "public static int[] MoveZeroes(int[] nums)\n{\n    // Write your code here\n}",
      "java": "public static int[] MoveZeroes(int[] nums) \n{\n    // Write your code here\n}"
    },
    "test_cases": [
    {  
      "input": {"nums": [0,1,0,3,12]},
      "output": [1,3,12,0,0]
    }],
    "code_run": {
      "python": "print(\"Test Case 1 \" + MoveZeroes([0,1,0,3,12]))\n ",
      "csharp": "Console.WriteLine(\"Test Case 1 [\" + string.Join(\", \", MoveZeroes([0,1,0,3,12] + \"]\");\n ",
      "java": "System.out.println(\"Test Case 1 \" + Arrays.toString(MoveZeroes([0,1,0,3,12])));\n "
    },
    "corrent_answer": "Test Case 1 [1,3,12,0,0]\n"
  },
  {
    "id": 11,
    "title": "Fizz Buzz",
    "difficulty": "Easy",
    "description": "Given an integer n, return a string array answer (1-indexed) where:\n- answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\n- answer[i] == \"Fizz\" if i is divisible by 3.\n- answer[i] == \"Buzz\" if i is divisible by 5.\n- otherwise, answer[i] == i (as a string).",
    "input": {"n": "int"},
    "output": "List[string]",
    "default_code": {
      "python": "def fizzBuzz(n):\n    # Write your code here\n    pass",
      "csharp": "public static IList<string> FizzBuzz(int n)\n{\n    // Write your code here\n    return new List<string>();\n}",
      "java": "public static List<String> fizzBuzz(int n) \n{\n    // Write your code here\n    return new ArrayList<>();\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", fizzBuzz(15))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + string.Join(\", \", FizzBuzz(15)));",
      "java": "System.out.println(\"Test Case 1 \" + fizzBuzz(15));"
    },
    "test_cases": [
      {"input": {"n": 15}, "output": ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]}
    ],
    "corrent_answer": "Test Case 1 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz\n"
  },
  {
    "id": 12,
    "title": "Valid Palindrome",
    "difficulty": "Easy",
    "description": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.",
    "input": {"s": "string"},
    "output": "bool",
    "default_code": {
      "python": "def isPalindrome(s):\n    # Write your code here\n    pass",
      "csharp": "public static bool IsPalindrome(string s)\n{\n    // Write your code here\n    return false;\n}",
      "java": "public static boolean isPalindrome(String s) \n{\n    // Write your code here\n    return false;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", isPalindrome(\"A man, a plan, a canal: Panama\"))\nprint(\"Test Case 2\", isPalindrome(\"race a car\"))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + IsPalindrome(\"A man, a plan, a canal: Panama\"));\nConsole.WriteLine(\"Test Case 2 \" + IsPalindrome(\"race a car\"));",
      "java": "System.out.println(\"Test Case 1 \" + isPalindrome(\"A man, a plan, a canal: Panama\"));\nSystem.out.println(\"Test Case 2 \" + isPalindrome(\"race a car\"));"
    },
    "test_cases": [
      {"input": {"s": "A man, a plan, a canal: Panama"}, "output": true},
      {"input": {"s": "race a car"}, "output": false}
    ],
    "corrent_answer": "Test Case 1 True\nTest Case 2 False\n"
  },
  {
    "id": 13,
    "title": "Longest Substring Without Repeating Characters",
    "difficulty": "Medium",
    "description": "Given a string s, find the length of the longest substring without repeating characters.",
    "input": {"s": "string"},
    "output": "int",
    "default_code": {
      "python": "def lengthOfLongestSubstring(s):\n    # Write your code here\n    pass",
      "csharp": "public static int LengthOfLongestSubstring(string s)\n{\n    // Write your code here\n    return 0;\n}",
      "java": "public static int lengthOfLongestSubstring(String s) \n{\n    // Write your code here\n    return 0;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", lengthOfLongestSubstring(\"abcabcbb\"))\nprint(\"Test Case 2\", lengthOfLongestSubstring(\"bbbbb\"))\nprint(\"Test Case 3\", lengthOfLongestSubstring(\"pwwkew\"))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + LengthOfLongestSubstring(\"abcabcbb\"));\nConsole.WriteLine(\"Test Case 2 \" + LengthOfLongestSubstring(\"bbbbb\"));\nConsole.WriteLine(\"Test Case 3 \" + LengthOfLongestSubstring(\"pwwkew\"));",
      "java": "System.out.println(\"Test Case 1 \" + lengthOfLongestSubstring(\"abcabcbb\"));\nSystem.out.println(\"Test Case 2 \" + lengthOfLongestSubstring(\"bbbbb\"));\nSystem.out.println(\"Test Case 3 \" + lengthOfLongestSubstring(\"pwwkew\"));"
    },
    "test_cases": [
      {"input": {"s": "abcabcbb"}, "output": 3},
      {"input": {"s": "bbbbb"}, "output": 1},
      {"input": {"s": "pwwkew"}, "output": 3}
    ],
    "corrent_answer": "Test Case 1 3\nTest Case 2 1\nTest Case 3 3\n"
  },
  {
    "id": 14,
    "title": "Container With Most Water",
    "difficulty": "Medium",
    "description": "Given n non-negative integers a1, a2, ..., an where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with the x-axis forms a container, such that the container contains the most water.",
    "input": {"height": "List[int]"},
    "output": "int",
    "default_code": {
      "python": "def maxArea(height):\n    # Write your code here\n    pass",
      "csharp": "public static int MaxArea(int[] height)\n{\n    // Write your code here\n    return 0;\n}",
      "java": "public static int maxArea(int[] height) \n{\n    // Write your code here\n    return 0;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", maxArea([1,8,6,2,5,4,8,3,7]))\nprint(\"Test Case 2\", maxArea([1,1]))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + MaxArea(new int[]{1,8,6,2,5,4,8,3,7}));\nConsole.WriteLine(\"Test Case 2 \" + MaxArea(new int[]{1,1}));",
      "java": "System.out.println(\"Test Case 1 \" + maxArea(new int[]{1,8,6,2,5,4,8,3,7}));\nSystem.out.println(\"Test Case 2 \" + maxArea(new int[]{1,1}));"
    },
    "test_cases": [
      {"input": {"height": [1,8,6,2,5,4,8,3,7]}, "output": 49},
      {"input": {"height": [1,1]}, "output": 1}
    ],
    "corrent_answer": "Test Case 1 49\nTest Case 2 1\n"
  },
  {
    "id": 15,
    "title": "Trapping Rain Water",
    "difficulty": "Hard",
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
    "input": {"height": "List[int]"},
    "output": "int",
    "default_code": {
      "python": "def trap(height):\n    # Write your code here\n    pass",
      "csharp": "public static int Trap(int[] height)\n{\n    // Write your code here\n    return 0;\n}",
      "java": "public static int trap(int[] height) \n{\n    // Write your code here\n    return 0;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", trap([0,1,0,2,1,0,1,3,2,1,2,1]))\nprint(\"Test Case 2\", trap([4,2,0,3,2,5]))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + Trap(new int[]{0,1,0,2,1,0,1,3,2,1,2,1}));\nConsole.WriteLine(\"Test Case 2 \" + Trap(new int[]{4,2,0,3,2,5}));",
      "java": "System.out.println(\"Test Case 1 \" + trap(new int[]{0,1,0,2,1,0,1,3,2,1,2,1}));\nSystem.out.println(\"Test Case 2 \" + trap(new int[]{4,2,0,3,2,5}));"
    },
    "test_cases": [
      {"input": {"height": [0,1,0,2,1,0,1,3,2,1,2,1]}, "output": 6},
      {"input": {"height": [4,2,0,3,2,5]}, "output": 9}
    ],
    "corrent_answer": "Test Case 1 6\nTest Case 2 9\n"
  },
  {
    "id": 16,
    "title": "Find All Anagrams in a String",
    "difficulty": "Medium",
    "description": "Given a string s and a non-empty string p, find all the start indices of p's anagrams in s. Strings consist of lowercase English letters only.",
    "input": {"s": "string", "p": "string"},
    "output": "List[int]",
    "default_code": {
      "python": "def findAnagrams(s, p):\n    # Write your code here\n    pass",
      "csharp": "public static IList<int> FindAnagrams(string s, string p)\n{\n    // Write your code here\n    return new List<int>();\n}",
      "java": "public static List<Integer> findAnagrams(String s, String p) \n{\n    // Write your code here\n    return new ArrayList<>();\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", findAnagrams(\"cbaebabacd\", \"abc\"))\nprint(\"Test Case 2\", findAnagrams(\"abab\", \"ab\"))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + string.Join(\", \", FindAnagrams(\"cbaebabacd\", \"abc\")));\nConsole.WriteLine(\"Test Case 2 \" + string.Join(\", \", FindAnagrams(\"abab\", \"ab\")));",
      "java": "System.out.println(\"Test Case 1 \" + findAnagrams(\"cbaebabacd\", \"abc\"));\nSystem.out.println(\"Test Case 2 \" + findAnagrams(\"abab\", \"ab\"));"
    },
    "test_cases": [
      {"input": {"s": "cbaebabacd", "p": "abc"}, "output": [0,6]},
      {"input": {"s": "abab", "p": "ab"}, "output": [0,1,2]}
    ],
    "corrent_answer": "Test Case 1 [0, 6]\nTest Case 2 [0, 1, 2]\n"
  },
  {
    "id": 17,
    "title": "Divide Two Integers",
    "difficulty": "Medium",
    "description": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator. Return the quotient after dividing dividend by divisor.",
    "input": {"dividend": "int", "divisor": "int"},
    "output": "int",
    "default_code": {
      "python": "def divide(dividend, divisor):\n    # Write your code here\n    pass",
      "csharp": "public static int Divide(int dividend, int divisor)\n{\n    // Write your code here\n    return 0;\n}",
      "java": "public static int divide(int dividend, int divisor) \n{\n    // Write your code here\n    return 0;\n}"
    },
    "code_run": {
      "python": "print(\"Test Case 1\", divide(10, 3))\nprint(\"Test Case 2\", divide(7, -3))",
      "csharp": "Console.WriteLine(\"Test Case 1 \" + Divide(10, 3));\nConsole.WriteLine(\"Test Case 2 \" + Divide(7, -3));",
      "java": "System.out.println(\"Test Case 1 \" + divide(10, 3));\nSystem.out.println(\"Test Case 2 \" + divide(7, -3));"
    },
    "test_cases": [
      {"input": {"dividend": 10, "divisor": 3}, "output": 3},
      {"input": {"dividend": 7, "divisor": -3}, "output": -2}
    ],
    "corrent_answer": "Test Case 1 3\nTest Case 2 -2\n"
  }
]